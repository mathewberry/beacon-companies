package com.mathewberry.companies;

import java.util.LinkedList;
import java.util.List;

import org.bukkit.Bukkit;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.plugin.Plugin;
import org.bukkit.plugin.PluginManager;
import org.bukkit.plugin.java.JavaPlugin;

import com.mathewberry.companies.listeners.CompanyListener;
import com.mathewberry.companies.models.CompanyTable;
import com.mathewberry.companies.persist.IPersistence;
import com.mathewberry.companies.persist.PersistenceDatabase;
import com.mathewberry.companies.plugin.hooks.VaultHandler;

import net.milkbowl.vault.Vault;

public class CompaniesCore extends JavaPlugin {
	
	private VaultHandler vaultHandler;
	private CompanyListener companyListener;
	private IPersistence persistence;
	
	@Override 
	public List<Class<?>> getDatabaseClasses()
	{
		List<Class<?>> classes = new LinkedList<Class<?>>();
		classes.add(CompanyTable.class);
		return classes;
	}
	
	@Override 
	public void installDDL()
	{
		super.installDDL();
	}
	
	@Override
	public void onEnable()
	{
		// Configuration
	    FileConfiguration config = getConfig();
	    config.options().copyDefaults(true);
	    saveConfig();
		
		// Dependencies
		if((!hasVault())) {
			getLogger().warning("Vault not found, plugin disabled!");
			Bukkit.getPluginManager().disablePlugin(this);
		}
		
		// Persistence
		persistence = new PersistenceDatabase(this);
		
		// Create listeners
		companyListener = new CompanyListener(this);
		
		// Register listeners
		PluginManager pm = getServer().getPluginManager();
		pm.registerEvents(companyListener, this);
		
		// Load commands
		getCommand("companies").setExecutor(new CompaniesCommandExecutor(this));
	}

	@Override
	public void onDisable()
	{
		// Notify persistence implementation
		persistence.shutdown();
		
		// Free some memory
		persistence = null;
		companyListener = null;
	}
	
	public static CompaniesCore getInstance()
	{
		return (CompaniesCore)Bukkit.getPluginManager().getPlugin("Companies");
	}
	
	public boolean hasVault()
	{
		Plugin plugin = getServer().getPluginManager().getPlugin("Vault");
		if ((plugin == null) || (!(plugin instanceof Vault))) {
			return false;
		}
		return true;
	}
	
	public VaultHandler getVaultHandler()
	{
		return this.vaultHandler;
	}
	
	@Override
	public boolean onCommand(CommandSender sender, Command command, String label, String[] args) 
	{
		if(command.getName().equalsIgnoreCase("companies")) {
			if(args.length == 0) {
				this.getCommand("create").setExecutor(new CreateCommandExecutor(this));
			}
			if(args[0].equalsIgnoreCase("help")) {
				return company_help(sender, args, label);
			}
			if(args[0].equalsIgnoreCase("create")) {
				return company_create(sender, args);
			}
			if(args[0].equalsIgnoreCase("delete")) {
				return company_delete(sender, args);
			}
			if(args[0].equalsIgnoreCase("rename")) {
				return company_rename(sender, args);
			}
			if(args[0].equalsIgnoreCase("deposit")) {
				return company_deposit(sender, args);
			}
			if(args[0].equalsIgnoreCase("withdraw")) {
				return company_withdraw(sender, args);
			}
			if(args[0].equalsIgnoreCase("balance")) {
				return company_balance(sender, args);
			}
		}
		return false;
	}
}
